/*
******************************* Copyright (c)*********************************\
**
**                 (c) Copyright 2017, DevKit.vip, china, qd. sd
**                          All Rights Reserved
**
**                           By(K)
********************************End of Head************************************\
*/
package com.idyoga.yoga.activity.user;


import android.os.Bundle;
import android.support.design.widget.TextInputLayout;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.idyoga.yoga.R;
import com.idyoga.yoga.comm.NetWorkConstant;
import com.idyoga.yoga.base.BaseActivity;
import com.idyoga.yoga.common.http.type1.HttpClient;
import com.idyoga.yoga.common.http.type1.HttpResponseHandler;
import com.idyoga.yoga.common.modle.PostResult;
import com.idyoga.yoga.model.ResultBean;
import com.idyoga.yoga.model.UserInfoBean;
import com.idyoga.yoga.utils.CommonUtils;
import com.idyoga.yoga.utils.TimeUtils;
import com.idyoga.yoga.utils.ToastUtil;
import com.idyoga.yoga.utils.UserUtil;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import butterknife.BindView;
import butterknife.OnClick;
import de.greenrobot.event.EventBus;
import okhttp3.Request;
import vip.devkit.library.Logcat;
import vip.devkit.library.SharedPreferencesUtils;
import vip.devkit.library.StringUtil;

/**
 * 文 件 名: LoginActivity
 * 功能描述:
 * 创 建 人: By k
 * 邮    箱:vip@devkit.vip
 * 网    站:www.devkit.vip
 * 创建日期: 2018/1/24
 * 版   本: V 1.0
 * 代码修改:（修改人 - 修改时间）
 * 修改备注：
 */
public class LoginActivity extends BaseActivity {
    @BindView(R.id.iv_back)
    ImageView mIvBack;
    @BindView(R.id.iv_user_hp)
    ImageView mIvUserHp;
    @BindView(R.id.et_handset)
    EditText mEtHandset;
    @BindView(R.id.btn_login)
    Button mBtnSubmit;
    @BindView(R.id.et_pwd)
    EditText mEtPwd;
    @BindView(R.id.tv_login_type)
    TextView mTvLoginType;
    @BindView(R.id.tv_forget_pwd)
    TextView mTvForgetPwd;
    @BindView(R.id.btn_register)
    Button mBtnRegister;
    @BindView(R.id.et_code)
    EditText mEtCode;
    @BindView(R.id.btn_get_code)
    Button mBtnGetCode;
    @BindView(R.id.rl_login_mobile)
    RelativeLayout mRlLoginMobile;
    @BindView(R.id.tip_mobile)
    TextInputLayout mTipMobile;
    @BindView(R.id.tip_pwd)
    TextInputLayout mTipPwd;
    int flag = 0;
    TimeUtils mTimeUtils;

    @Override
    protected void initImmersionBar() {
        super.initImmersionBar();
        mImmersionBar.titleBar(mIvBack).flymeOSStatusBarFontColor("#333333").init();
    }

    @Override
    protected void initData() {

    }

    @Override
    protected int setLayoutId() {
        return R.layout.activity_user_login;
    }

    @Override
    protected void initView() {
        mTimeUtils = new TimeUtils(mBtnGetCode);
        mTipMobile.clearFocus();
        mEtHandset.clearFocus();
        mTipPwd.clearFocus();
        mEtPwd.clearFocus();
    }

    @Override
    protected void setListener() {
        mEtHandset.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                mTipMobile.setErrorEnabled(false);
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            }

            @Override
            public void afterTextChanged(Editable editable) {
                String mobile = editable.toString();
                if (StringUtil.isEmpty(mobile)) {
                    mTipMobile.setErrorEnabled(true);
                    CommonUtils.showError(mTipMobile, "请输入手机号");
                    return;
                }
                if (!CommonUtils.isMobile(mobile)) {
                    mTipMobile.setErrorEnabled(true);
                    CommonUtils.showError(mTipMobile, "请输入正确手机号");
                    return;
                }
            }
        });
        mEtPwd.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                mTipPwd.setErrorEnabled(false);
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void afterTextChanged(Editable editable) {
                String pwd = editable.toString();
                String regex = "^[0-9A-Za-z]{6,16}$";
                if (!Pattern.matches(regex, pwd) && flag == 0) {
                    mTipPwd.setErrorEnabled(true);
                    CommonUtils.showError(mTipPwd, "请输入6-16位数字和字母组成的密码");
                    return;
                }
            }
        });
    }

    @OnClick({R.id.iv_back, R.id.iv_user_hp, R.id.tv_login_type, R.id.tv_forget_pwd, R.id.btn_login, R.id.btn_get_code, R.id.btn_register})
    public void onViewClicked(View view) {
        Bundle bundle;
        switch (view.getId()) {
            case R.id.iv_back:
                finish();
                break;
            case R.id.iv_user_hp:
                break;
            case R.id.tv_login_type:
                if (flag == 0) {
                    mTvLoginType.setText("使用密码登录");
                    LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) mTipMobile.getLayoutParams();
                    LinearLayout.LayoutParams layoutParams1 = (LinearLayout.LayoutParams) mRlLoginMobile.getLayoutParams();
                    layoutParams1.height = layoutParams.height;
                    mRlLoginMobile.setLayoutParams(layoutParams1);
                    mTvForgetPwd.setVisibility(View.GONE);
                    mTipPwd.setVisibility(View.GONE);
                    mRlLoginMobile.setVisibility(View.VISIBLE);
                } else if (flag == 1) {
                    mTvLoginType.setText("使用验证码登录");
                    mTvForgetPwd.setVisibility(View.VISIBLE);
                    mTipPwd.setVisibility(View.VISIBLE);
                    mRlLoginMobile.setVisibility(View.GONE);
                }
                flag = (flag + 1) % 2;
                break;
            case R.id.tv_forget_pwd:
                bundle = new Bundle();
                bundle.putString("tag", "login");
                startActivity(UpdatePwdActivity.class, bundle);
                break;
            case R.id.btn_get_code:
                String mobile = mEtHandset.getText().toString();
                if (StringUtil.isEmpty(mobile)) {
                    ToastUtil.showToast("手机号不能为空");
                    return;
                }
                if (!CommonUtils.isMobile(mobile)) {
                    ToastUtil.showToast("请输入正确的手机号");
                    return;
                }
                mTimeUtils.RunTimer();
                RegPhone(mEtHandset.getText().toString().trim());
                break;
            case R.id.btn_login:
                if (flag == 0) {
                    RegPwdLoginData(mEtHandset.getText().toString(), mEtPwd.getText().toString(), flag);
                } else {
                    RegPwdLoginData(mEtHandset.getText().toString(), mEtCode.getText().toString(), flag);
                }
                break;
            case R.id.btn_register:
                startActivityWithoutExtras(RegisterActivity.class);
                break;
        }

    }

    private void RegPwdLoginData(String mobile, String pwdOrCode, int flag) {
        if (StringUtil.isEmpty(mobile)) {
            mTipMobile.setErrorEnabled(true);
            CommonUtils.showError(mTipMobile, "请输入手机号");
            return;
        }
        if (!CommonUtils.isMobile(mobile)) {
            mTipMobile.setErrorEnabled(true);
            CommonUtils.showError(mTipMobile, "请输入正确手机号");
            return;
        }
        if (StringUtil.isEmpty(pwdOrCode) && flag == 0) {
            mTipPwd.setErrorEnabled(true);
            CommonUtils.showError(mTipPwd, "密码不能为空");
            return;
        }
        String regex = "^[0-9A-Za-z]{6,16}$";
        Logcat.e("密码正则：" + Pattern.matches(regex, pwdOrCode) + "/" + pwdOrCode);
        if (!Pattern.matches(regex, pwdOrCode) && flag == 0) {
            mTipPwd.setErrorEnabled(true);
            CommonUtils.showError(mTipPwd, "请输入6-16位数字和字母组成的密码");
            return;
        }
        if (StringUtil.isEmpty(pwdOrCode) && flag == 1) {
            ToastUtil.showToast("验证码不能为空");
            return;
        }
        ExecuteLogin(mobile, pwdOrCode, flag);
    }

    /**
     * 验证码密码登录
     * @param mobile
     * @param pwdOrCode  验证码、密码
     * @param flag
     */
    private void ExecuteLogin(String mobile, String pwdOrCode, int flag) {
        final String url;
        Map map = new HashMap();
        map.put("mobile", mobile);
        if (flag == 0) {
            map.put("password", pwdOrCode);
//            url = NetWorkConstant.USER_LONIN_PWD;
            url = "http://testyogabook.hq-xl.com/mall/App_user_data/login";
        } else {
            map.put("smsNumber", pwdOrCode);
//            url = NetWorkConstant.USER_LONIN_CODE;
            url = "http://testyogabook.hq-xl.com/mall/App_user_data/SmsloginUser";
        }
        final String str = map.toString();
        final String urls = url;
        HttpClient.post(url, map, new HttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, String content) {
                super.onSuccess(statusCode, content);
                Logcat.i("\n接口地址：" + urls + "\n提交的参数：" + str + "\n" + "返回码：" + statusCode + "\n" + "返回参数：" + content);
                final ResultBean mResultBean = JSON.parseObject(content, ResultBean.class);
                if (mResultBean.getCode().equals("1")) {
                    UserInfoBean userInfoBean = JSON.parseObject(mResultBean.getData(), UserInfoBean.class);
                    Logcat.e("原始数据" + userInfoBean.toString());
                    SharedPreferencesUtils.setSP(LoginActivity.this, "UserId", userInfoBean.getId());
                    SharedPreferencesUtils.setSP(LoginActivity.this, "Token", userInfoBean.getToken());
                    UserUtil.setUserBean(LoginActivity.this, JSON.toJSONString(userInfoBean));
                    UserInfoBean userInfoBean1 = UserUtil.getUserBean(LoginActivity.this);
                    if (userInfoBean1 != null) {
                        Logcat.i("数据插入成功：" + "/\n" + userInfoBean1.toString());
                    }
                    ToastUtil.showToast("登录成功");
                    EventBus.getDefault().post(new PostResult("loginIn", userInfoBean));
                    finish();
                } else {
                    Logcat.e("" + mResultBean.getMsg());
                    ToastUtil.showToast(mResultBean.getMsg());
                }
            }

            @Override
            public void onFailure(Request request, IOException e) {
                super.onFailure(request, e);
            }
        });
    }

    private void RegPhone(String mobile) {
        Map<String, String> map = new HashMap();
        map.put("mobile", mobile);
        final String str = map.toString();
        HttpClient.post(NetWorkConstant.GET_SMS_FOR_LONGIN, map, new HttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, String content) {
                super.onSuccess(statusCode, content);
                Logcat.i("\n接口地址：" + NetWorkConstant.GET_SMS_FOR_LONGIN + "\n提交的参数：" + str + "\n" + "返回码：" + statusCode + "\n" + "返回参数：" + content);
                ResultBean resultBean = JSON.parseObject(content, ResultBean.class);
                if (resultBean.getCode().equals("1")) {
                    ToastUtil.showToast(resultBean.getMsg());
                } else {
                    if (mTimeUtils != null) {
                        mTimeUtils.StopTimer();
                    }
                    ToastUtil.showToast(resultBean.getMsg());
                }
            }

            @Override
            public void onFailure(Request request, IOException e) {
                super.onFailure(request, e);
                if (mTimeUtils != null) {
                    mTimeUtils.StopTimer();
                }
            }
        });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mTimeUtils.StopTimer();
    }
}
